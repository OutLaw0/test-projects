(function(){"use strict";var __webpack_modules__={241:function(){eval('\n;// CONCATENATED MODULE: ./src/js/create.js\n//import {keyLayout} from \'./base.js\'\nfunction createHeader() {\n  var container = document.createElement("div");\n  var footer = document.createElement("footer");\n  container.classList.add("container");\n  document.body.appendChild(container);\n  document.body.appendChild(footer);\n  var new_desc_inner = "<h1>Virtual Keyboard w/ Vanilla JS</h1>\\n    <h3>Features</h3>\\n    <ul>\\n        <li>Vanilla JS with ES6 modules (<strong>no libraries required!</strong>)</li>\\n        <li>Build: Webpack + Eslint (Airbnb plg)</li>\\n        <li>Responsive styles</li>\\n        <li>To switch language: <strong>press</strong> left ctrl + alt or <strong>click</strong> on <i class=\\"material-icons\\">language</i> icon </li> \\n    </ul>\\n    <textarea name=\\"keyboard_text\\" class=\\"use-keyboard-input\\" rows=\\"5\\" cols=\\"35\\"></textarea>";\n  container.insertAdjacentHTML("afterBegin", new_desc_inner);\n  var new_footer_inner = "<div class=\\"footer__container footer-copyright\\">\\n    <div class=\\"footer-copyright__element\\">\\n        <p class=\\"copyright\\">\\xA9</p>\\n        <p class=\\"year\\">2022</p>\\n        <a class=\\"github-username\\" href=\\"https://github.com/OutLaw0\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">github</a>\\n    </div>\\n    <a href=\\"https://rs.school/js/\\" class=\\"rss\\" target=\\"_blank\\"> Rolling Scopes School </a>\\n</div>";\n  footer.insertAdjacentHTML("afterBegin", new_footer_inner);\n}\nfunction createKeys() {\n  var fragment = document.createDocumentFragment(); //Create HTML icon\n\n  var createIconHtml = function createIconHtml(icon_name) {\n    return "<i class=\\"material-icons\\">".concat(icon_name, "</i>");\n  };\n\n  var createSpecKey = function createSpecKey(name) {\n    return "<span class=\\"special-key\\">".concat(name, "</span>");\n  };\n\n  var langArr = this.keyLayout.en;\n\n  if (this.properties.langRU) {\n    langArr = this.keyLayout.ru;\n  }\n\n  langArr.forEach(function (key) {\n    var keyElement = document.createElement(\'button\');\n    var insertLineBreak = ["backspace", "Del", "enter", "&#9658;", "Close"].indexOf(key) !== -1; // Add attributes/classes\n\n    keyElement.setAttribute("type", "button");\n    keyElement.classList.add("keyboard__key");\n\n    switch (key) {\n      case "backspace":\n        keyElement.classList.add("keyboard__key--wide"); //keyElement.classList.add(this.keyLayout.keyboardOrder[index])\n\n        keyElement.innerHTML = createIconHtml("backspace");\n        break;\n\n      case "Ctrl":\n        // keyElement.classList.add("keyboard__key--wide");\n        //  keyElement.classList.add(this.keyLayout.keyboardOrder[index])\n        keyElement.innerHTML = createSpecKey("Ctrl");\n        break;\n\n      case "Alt":\n        // keyElement.classList.add("keyboard__key--wide");\n        //keyElement.classList.add(this.keyLayout.keyboardOrder[index])\n        keyElement.innerHTML = createSpecKey("Alt");\n        break;\n\n      case "Tab":\n        //keyElement.classList.add("keyboard__key--wide")\n        // keyElement.classList.add(this.keyLayout.keyboardOrder[index])\n        keyElement.innerHTML = createSpecKey("Tab");\n        break;\n\n      case "enter":\n        keyElement.classList.add("keyboard__key--wide"); // keyElement.classList.add(this.keyLayout.keyboardOrder[index])\n\n        keyElement.innerHTML = createIconHtml("keyboard_return");\n        break;\n\n      case "space":\n        keyElement.classList.add("keyboard__key--extra-wide"); // keyElement.classList.add(this.keyLayout.keyboardOrder[index])\n\n        keyElement.innerHTML = createIconHtml("space_bar");\n        break;\n\n      case "caps":\n        keyElement.classList.add("keyboard__key--wide", "keyboard__key--activatable"); // keyElement.classList.add(this.keyLayout.keyboardOrder[index])\n\n        keyElement.innerHTML = createIconHtml("keyboard_capslock");\n        break;\n\n      case "Shift":\n        keyElement.classList.add("keyboard__key--wide", "keyboard__key--activatable"); // keyElement.classList.add(this.keyLayout.keyboardOrder[index])\n\n        keyElement.innerHTML = createSpecKey("Shift");\n        break;\n\n      case "changeLang":\n        keyElement.classList.add("keyboard__key--dark"); //  keyElement.classList.add(this.keyLayout.keyboardOrder[index])\n\n        keyElement.innerHTML = createIconHtml("language");\n        break;\n\n      case "Del":\n        //keyElement.classList.add("keyboard__key--wide");\n        keyElement.innerHTML = createSpecKey("Del"); //  keyElement.classList.add(this.keyLayout.keyboardOrder[index])\n\n        break;\n\n      case "Close":\n        keyElement.classList.add("keyboard__key--wide", "keyboard__key--dark"); //   keyElement.classList.add(this.keyLayout.keyboardOrder[index])\n\n        keyElement.innerHTML = createIconHtml("check_circle");\n        break;\n\n      default:\n        keyElement.innerHTML = key.toLowerCase(); //  keyElement.classList.add(this.keyLayout.keyboardOrder[index])\n\n        break;\n    }\n\n    fragment.appendChild(keyElement);\n\n    if (insertLineBreak) {\n      fragment.appendChild(document.createElement("br"));\n    }\n  });\n  return fragment;\n}\n;// CONCATENATED MODULE: ./src/js/base.js\nvar keyLayout = {\n  \'en\': ["`", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "-", "=", "backspace", "Tab", "q", "w", "e", "r", "t", "y", "u", "i", "o", "p", "[", "]", "\\\\", "Del", "caps", "a", "s", "d", "f", "g", "h", "j", "k", "l", ";", "\'", "enter", "Shift", "z", "x", "c", "v", "b", "n", "m", ",", ".", "/", "&#9650;", "Close", "Ctrl", "changeLang", "Alt", "space", "&#9668;", "&#9660;", "&#9658;"],\n  \'ru\': ["ё", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "-", "=", "backspace", "Tab", "й", "ц", "у", "к", "е", "н", "г", "ш", "щ", "з", "х", "ъ", "\\\\", "Del", "caps", "ф", "ы", "в", "а", "п", "р", "о", "л", "д", "ж", "э", "enter", "Shift", "я", "ч", "с", "м", "и", "т", "ь", "б", "ю", ".", "&#9650;", "Close", "Ctrl", "changeLang", "Alt", "space", "&#9668;", "&#9660;", "&#9658;"],\n  \'Shift_en\': ["~", "!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "_", "+", "backspace", "Tab", "Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P", "{", "}", "|", "Del", "caps", "A", "S", "D", "F", "G", "H", "J", "K", "L", ":", "\\"", "enter", "Shift", "Z", "X", "C", "V", "B", "N", "M", "<", ">", "?", "&#9650;", "Close", "Ctrl", "changeLang", "Alt", "space", "&#9668;", "&#9660;", "&#9658;"],\n  \'Shift_ru\': ["Ё", "!", "\\"", "№", ";", "%", ":", "?", "*", "(", ")", "_", "+", "backspace", "Tab", "Й", "Ц", "У", "К", "Е", "Н", "Г", "Ш", "Щ", "З", "Х", "Ъ", "/", "Del", "caps", "Ф", "Ы", "В", "А", "П", "Р", "О", "Л", "Д", "Ж", "Э", "enter", "Shift", "Я", "Ч", "С", "М", "И", "Т", "Ь", "Б", "Ю", ",", "&#9650;", "Close", "Ctrl", "changeLang", "Alt", "space", "&#9668;", "&#9660;", "&#9658;"],\n  \'keyboardOrder\': ["Backquote", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0", "Minus", "Equal", "Backspace", "Tab", "KeyQ", "KeyW", "KeyE", "KeyR", "KeyT", "KeyY", "KeyU", "KeyI", "KeyO", "KeyP", "BracketLeft", "BracketRight", "Backslash", "Delete", "CapsLock", "KeyA", "KeyS", "KeyD", "KeyF", "KeyG", "KeyH", "KeyJ", "KeyK", "KeyL", "Semicolon", "Quote", "Enter", "ShiftLeft", "KeyZ", "KeyX", "KeyC", "KeyV", "KeyB", "KeyN", "KeyM", "Comma", "Period", "Slash", "ArrowUp", "Close", "ControlLeft", "MetaLeft", "AltLeft", "Space", "ArrowLeft", "ArrowDown", "ArrowRight"]\n};\n;// CONCATENATED MODULE: ./src/js/keyevents.js\nfunction print(key, type) {\n  var position = this.textArea.selectionStart;\n\n  switch (key) {\n    case "backspace":\n      if (type == "mousedown" || type == "keydown") {\n        this.properties.value = this.properties.value.slice(0, position - 1) + this.properties.value.slice(position, this.properties.value.length);\n\n        this._triggerEvent("oninput");\n\n        this.textArea.setSelectionRange(position - 1, position - 1);\n      }\n\n      break;\n\n    case "Ctrl":\n      if (type == "keydown") {\n        this.ctrl = true;\n      }\n\n      if (type == "keyup") {\n        this.ctrl = false;\n      }\n\n      break;\n\n    case "Alt":\n      if (type == "keydown" && this.ctrl) {\n        this._toggleLang(this.properties.langRU ? \'en\' : \'ru\');\n\n        this.properties.langRU = !this.properties.langRU;\n      }\n\n      break;\n\n    case "Tab":\n      if (type == "mousedown" || type == "keydown") {\n        this.properties.value = this.properties.value.slice(0, position) + "\\t" + this.properties.value.slice(position, this.properties.value.length);\n\n        this._triggerEvent("oninput");\n\n        this.textArea.setSelectionRange(position + 1, position + 1);\n      }\n\n      break;\n\n    case "keyboard_return":\n      if (type == "mousedown" || type == "keydown") {\n        this.properties.value = this.properties.value.slice(0, position) + "\\n" + this.properties.value.slice(position, this.properties.value.length);\n\n        this._triggerEvent("oninput");\n\n        this.textArea.setSelectionRange(position + 1, position + 1);\n      }\n\n      break;\n\n    case "space_bar":\n      if (type == "mousedown" || type == "keydown") {\n        this.properties.value = this.properties.value.slice(0, position) + " " + this.properties.value.slice(position, this.properties.value.length);\n\n        this._triggerEvent("oninput");\n\n        this.textArea.setSelectionRange(position + 1, position + 1);\n      }\n\n      break;\n\n    case "keyboard_capslock":\n      {\n        if (type == "mousedown" || type == "keydown") {\n          var elem = this.elements.keys[29];\n\n          this._toggleCapsLock();\n\n          elem.classList.toggle("keyboard__key--active", this.properties.capsLock);\n        }\n      }\n      break;\n\n    case "Shift":\n      {\n        var _elem = this.elements.keys[42];\n\n        if (type == "mousedown" || type == "keydown") {\n          this._toggleShift(this.properties.langRU ? \'Shift_ru\' : \'Shift_en\');\n\n          _elem.classList.add("keyboard__key--active");\n        }\n\n        if (type == "keyup" || type == "mouseup") {\n          this._toggleLang(this.properties.langRU ? \'ru\' : \'en\');\n\n          _elem.classList.remove("keyboard__key--active");\n        }\n      }\n      break;\n\n    case "language":\n      if (type == "mousedown" || type == "keydown") {\n        this._toggleLang(this.properties.langRU ? \'en\' : \'ru\');\n\n        this.properties.langRU = !this.properties.langRU;\n      }\n\n      break;\n\n    case "Del":\n      if (type == "mousedown" || type == "keydown") {\n        this.properties.value = this.properties.value.substring(0, position) + this.properties.value.substring(position + 1);\n\n        this._triggerEvent("oninput");\n\n        this.textArea.setSelectionRange(position, position);\n      }\n\n      break;\n\n    case "check_circle":\n      {\n        var _elem2 = this.elements.keys[54];\n\n        if (type == "mousedown" || type == "keydown") {\n          _elem2.focus();\n\n          this.close();\n\n          this._triggerEvent("onclose");\n        }\n      }\n      break;\n\n    default:\n      if (type == "mousedown" || type == "keydown") {\n        this.properties.value = this.properties.value.slice(0, position) + key + this.properties.value.slice(position, this.properties.value.length);\n\n        this._triggerEvent("oninput");\n\n        this.textArea.setSelectionRange(position + 1, position + 1);\n      }\n\n      break;\n  }\n}\n;// CONCATENATED MODULE: ./src/js/cookie.js\nfunction getPreference() {\n  if (localStorage.getItem(\'lang\')) {\n    var lang = localStorage.getItem(\'lang\'); // console.log(lang)\n\n    if (lang == "ru") {\n      this.properties.langRU = true;\n    }\n  }\n}\nfunction setLocalStorage(a) {\n  var lang;\n  a ? lang = "ru" : lang = "en";\n  localStorage.setItem(\'lang\', lang);\n}\n;// CONCATENATED MODULE: ./src/index.js\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n/*start keyboard*/\n\nvar Keyboard = {\n  elements: {\n    main: null,\n    keysContainer: null,\n    keys: [],\n    textArea: null\n  },\n  eventHandlers: {\n    oninput: null,\n    onclose: null\n  },\n  properties: {\n    value: "",\n    capsLock: false,\n    ctrl: false,\n    langRU: false\n  },\n  keyLayout: keyLayout,\n  init: function init() {\n    var _this = this;\n\n    getPreference.call(Keyboard); //get lang\n    //create elements\n\n    var textArea = document.querySelector(".use-keyboard-input");\n    this.textArea = textArea;\n    this.elements.main = document.createElement("div");\n    this.elements.keysContainer = document.createElement("div"); //add class\n\n    this.elements.main.classList.add("keyboard", "keyboard--hidden");\n    this.elements.keysContainer.classList.add("keyboard__keys");\n    this.elements.keysContainer.appendChild(createKeys.call(Keyboard)); //create elements from create JS\n\n    this.elements.keys = this.elements.keysContainer.querySelectorAll(".keyboard__key"); //prevent losefocus!\n\n    this.elements.main.addEventListener("mousedown", function (e) {\n      e.preventDefault();\n    }, false);\n    this.elements.main.appendChild(this.elements.keysContainer);\n    document.body.firstElementChild.appendChild(this.elements.main); // Automatically use keyboard for elements with .use-keyboard-input\n\n    this.elements.main.addEventListener("mousedown", function (e) {\n      _this._handleKeyboard(e);\n    });\n    this.elements.main.addEventListener("mouseup", function (e) {\n      _this._handleKeyboard(e);\n    });\n    document.addEventListener("keydown", function (e) {\n      _this._handleKeyboard(e);\n    });\n    document.addEventListener("keyup", function (e) {\n      _this._handleKeyboard(e);\n    });\n    textArea.addEventListener("focus", function () {\n      _this.open(textArea.value, function (currentValue) {\n        textArea.value = currentValue;\n      });\n    });\n    textArea.focus(); //setTimeout(() => textArea.focus(), 300);\n\n    /*  this.open(textArea.value, currentValue => {\r\n        textArea.value = currentValue;\r\n    });*/\n  },\n  _triggerEvent: function _triggerEvent(handlerName) {\n    //set textarea.value\n    if (typeof this.eventHandlers[handlerName] == "function") {\n      this.eventHandlers[handlerName](this.properties.value);\n    }\n  },\n  _handleKeyboard: function _handleKeyboard(e) {\n    if (e.stopPropagation) e.stopPropagation();\n    var code = e.code,\n        type = e.type;\n    var array = this.keyLayout[\'keyboardOrder\'];\n    var array1 = this.elements.keys;\n\n    if (type == \'keydown\' || type == \'keyup\') {\n      e.preventDefault();\n      var myKey = array.find(function (key) {\n        return key === code;\n      });\n      if (!myKey) return;\n      if (type == \'keydown\') array1[array.indexOf(code)].classList.add("active");\n      if (type == \'keyup\') array1[array.indexOf(code)].classList.remove("active");\n      var key = array1[array.indexOf(code)].textContent;\n      print.call(Keyboard, key, type);\n    }\n\n    if (type == \'mousedown\' || type == \'mouseup\') {\n      // console.log(e.target.classList)\n      if (e.target.classList.contains("keyboard__key") || e.target.classList.contains("material-icons") || e.target.classList.contains("special-key")) {\n        var _key = e.target.textContent;\n        print.call(Keyboard, _key, type);\n      }\n    }\n  },\n  _toggleCapsLock: function _toggleCapsLock() {\n    this.properties.capsLock = !this.properties.capsLock;\n\n    var _iterator = _createForOfIteratorHelper(this.elements.keys),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var key = _step.value;\n\n        if (key.childElementCount === 0) {\n          key.textContent = this.properties.capsLock ? key.textContent.toUpperCase() : key.textContent.toLowerCase();\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  },\n  _toggleLang: function _toggleLang(lang) {\n    var array = this.keyLayout[lang];\n    this.elements.keys.forEach(function (el, i) {\n      if (el.childElementCount === 0) {\n        el.innerHTML = array[i];\n      }\n    });\n\n    if (this.properties.capsLock) {\n      var _iterator2 = _createForOfIteratorHelper(this.elements.keys),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var key = _step2.value;\n\n          if (key.childElementCount === 0) {\n            key.textContent = key.textContent.toUpperCase();\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  },\n  _toggleShift: function _toggleShift(lang) {\n    var array = this.keyLayout[lang];\n    this.elements.keys.forEach(function (el, i) {\n      if (el.childElementCount === 0) {\n        el.innerHTML = array[i];\n      }\n    });\n\n    if (this.properties.capsLock) {\n      var _iterator3 = _createForOfIteratorHelper(this.elements.keys),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var key = _step3.value;\n\n          if (key.childElementCount === 0) {\n            key.textContent = key.textContent.toLowerCase();\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  },\n  open: function open(initialValue, oninput, onclose) {\n    this.properties.value = initialValue || "";\n    this.eventHandlers.oninput = oninput;\n    this.eventHandlers.onclose = onclose;\n    this.elements.main.classList.remove("keyboard--hidden");\n  },\n  close: function close() {\n    this.properties.value = "";\n    this.eventHandlers.oninput = oninput;\n    this.eventHandlers.onclose = onclose;\n    this.elements.main.classList.add("keyboard--hidden");\n  }\n  /*print(){\r\n  }*/\n\n};\nwindow.addEventListener("DOMContentLoaded", function () {\n  createHeader();\n  Keyboard.init();\n});\nwindow.addEventListener(\'beforeunload\', function () {\n  setLocalStorage(Keyboard.properties.langRU);\n}); //TODO\n// сделать нормальный Html creator\n//ДОП. удаление выделением backspace\n// PROFIT!!!//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///241\n')}},__webpack_exports__={};__webpack_modules__[241]()})();